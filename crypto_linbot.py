# -*- coding: utf-8 -*-
"""crypto_linbot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TWz8yhAQQ6bdsClOaLYptJSiUMuEMFku
"""

'''
用戶關注的時候，提示機器人怎麼用
用戶發文字消息的時候，提示機器人怎麼用
用戶發圖片的時候，把圖片交給模型，模型回傳結果
 再依據結果作條件判斷，依據機率大小作回應
'''

'''
安裝套件(colab)
上傳模型
模型解壓縮
引用套件
flask app準備 line_bot_api handler準備
業務方法準備
  @handler.add(FollowerEvent)
  @handler.add(MessageEvent, message=TextMessage)
  @handler.add(MessageEvent, message=ImageMessage)
應用啟動

'''

'''
安裝套件
'''
!pip install line-bot-sdk flask flask-ngrok

'''
引用套件
'''

# 引用Web Server套件
from flask import Flask, request, abort, jsonify

# 載入json處理套件
import json

# 外部連結自動生成套件
from flask_ngrok import run_with_ngrok

# 從linebot 套件包裡引用 LineBotApi 與 WebhookHandler 類別
from linebot import (
    LineBotApi, WebhookHandler
)

from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage
)
# 引用無效簽章錯誤
from linebot.exceptions import (
    InvalidSignatureError
)

'''
建置主程序

建置handler與 line_bot_api
'''

# LINE 聊天機器人的基本資料
app = Flask(__name__,static_url_path = "/material" , static_folder = "./material/")
run_with_ngrok(app)

# 生成實體物件
#channel accsee token
line_bot_api = LineBotApi("jXrj4ysTQnsEdrx4MNTNRfE6zZb/tQplYHpO/yzEsaSGmrjTueV2q3a4DMG4oRyCvRT8EMKQb+gQ2irg7tk445A9mjNI+i1uSCxl1zh+nUMhyMfsyCUMkHfKjg0wm1uytxeRTk4C5no7tlugxC77MAdB04t89/1O/w1cDnyilFU=")
#channel secret
handler = WebhookHandler("e49b304eee8542c0297df4cf0be72060")

@app.route("/", methods=['POST'])
def callback():
    # get X-Line-Signature header value
    signature = request.headers['X-Line-Signature']

    # get request body as text
    body = request.get_data(as_text=True)
    print(body)


    # handle webhook body
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)

    return 'OK'

'''
在關注的時候發送訊息讓對方輸入想看的貨幣
'''

from linebot.models import (
    FollowEvent
)
from linebot.models import(
    TextSendMessage
)

# 告知handler，如果收到FollowEvent，則做下面的方法處理
#剛創造出來的handler(總機)是空白的
@handler.add(FollowEvent)#若handler收到關注事件時，做下面的事情
def reply_text_and_get_user_profile(event):

    # 回覆文字消息與圖片消息
    line_bot_api.reply_message(
        event.reply_token,
        [TextSendMessage(text = "Hello ~ I'm your personal Crypto Assistant. Please tell me the Crypto name that you want to search! (ex:BTCUSDT)")
    ]
    )

'''
當下價格

import json
import requests

def cryptoprice(name):
  key = 'https://api.binance.com/api/v3/ticker/price?symbol=' + name
  data = requests.get(key)  
  data = data.json()
  print(data['price'])

cryptoprice('APEUSDT')


#key = "https://api.binance.com/api/v3/ticker/price?symbol=APEUSDT"
  
key = "https://api.binance.com/api/v3/ticker/price?symbol=" + 'APEUSDT'

data = requests.get(key)  
data = data.json()
#print(f"{data['symbol']} price is {data['price']}")

"Crpyto Price is " + data['price']
'''

#機器人內容
'''
設計範本訊息

'''
import requests
import json
from pandas import json_normalize
import pandas as pd 
import numpy as np  
import datetime as dt  
import os
import requests
import datetime, time

#引入所需要的消息與模板消息
from linebot.models import (
    MessageEvent, TemplateSendMessage
)

#引入按鍵模板
from linebot.models import (
    MessageEvent,
    PostbackEvent,
    TextSendMessage,
    TemplateSendMessage,
    ButtonsTemplate,
    CarouselTemplate,
    CarouselColumn,
    ConfirmTemplate,
    MessageTemplateAction,
    PostbackAction,
    PostbackTemplateAction,
    MessageAction,
    URIAction

)

'''
alt_text: Line簡覽視窗所出現的說明文字
template: 所使用的模板
ButtonsTemplate: 按鍵模板
    thumbnail_image_url: 展示圖片
    title: 標題
    text: 說明文字
    actions: 模板行為所使用的行為
    data: 觸發postback後用戶回傳值，可以對其做商業邏輯處理

'''

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
  #price
  key = 'https://api.binance.com/api/v3/ticker/price?symbol=' + event.message.text
  data = requests.get(key)  
  data = data.json()

  #kline
  root_url = 'https://api.binance.com/api/v1/klines'
  url = root_url + '?symbol=' + event.message.text + '&interval=1d'
  data1 = json.loads(requests.get(url).text)
  df = pd.DataFrame(data1)
  df.columns = ['dateTime',
                  'open', 'high', 'low', 'close', 'volume',
                  'close_time', 'qav', 'num_trades',
                  'taker_base_vol', 'taker_quote_vol', 'ignore']
  df.dateTime = pd.to_datetime(df.dateTime, unit='ms').dt.strftime("%Y-%m-%d")
  df.set_index('dateTime', inplace=True)
  last = df.iloc[:, 1:6].tail(1)
  series=last.squeeze()
  confirm_template_message = TemplateSendMessage(
      alt_text = 'confirm template',
      template=ConfirmTemplate(
          text='See more about ' + event.message.text+'?',
          actions=[
                   PostbackTemplateAction(
                       label='Sure',
                       text='Sure',
                       data='A&Sure'
                   ),
                   PostbackTemplateAction(
                       label='No, Thanks',
                       text='No, Thanks',
                       data='B&No' 
                   )
          ]
      )
  )
  
 
  line_bot_api.reply_message(event.reply_token, [TextSendMessage(text = event.message.text + " Price is "+ str(round(float(data['price']), 2)) + "\n" 
                                                               + "Highest Price(24hrs):" + str(round(float(series[0]), 2))  + "\n"
                                                               + "Lowest Price(24hrs): " + str(round(float(series[1]), 2)) + "\n"
                                                               + "Volume(24hrs): " + str(round(float(series[3]), 2)) )
                                                ,confirm_template_message
                                                 ])
  
@handler.add(PostbackEvent)
def confirm_url(event):
  if event.postback.data[0:1] == "A":
    line_bot_api.reply_message(event.reply_token, TemplateSendMessage(
        alt_text='Carousel Template',
        template = CarouselTemplate(
            columns=[
                     CarouselColumn(
                         thumbnail_image_url='https://www.abmedia.io/wp-content/uploads/2021/09/CMC.jpg',
                         title='CoinMarket Cap',
                         text='You can see more information about Cryptocurrency',
                         actions=[
                                  URIAction(
                                      label='View Detail',
                                      uri='https://coinmarketcap.com/zh-tw/')
                         ]
                     )
            ]
            )
    )
    )
  elif event.postback.data[0:1] == "B":
    line_bot_api.reply_message(event.reply_token, TextSendMessage(text='Thank you for using Crypto Assistant !'))

'''
klines


import requests
import json
from pandas import json_normalize
import pandas as pd 
import numpy as np  
import datetime as dt  
import os

import datetime, time
#market = 'BTCUSDT'
#tick_interval = '1h'

def klines(name, time):
  key = 'https://api.binance.com/api/v3/klines?symbol='+name+'&interval='+time
  data = requests.get(key).json()
  df = pd.read_json(data)
 

klines('APEUSDT', '30m') 

frequency = input("Please enter the frequency (1m/5m/30m/.../1h/6h/1d/ :  ")

def klines(symbol):
    root_url = 'https://api.binance.com/api/v1/klines'
    url = root_url + '?symbol=' + symbol + '&interval=1d' 
    data = json.loads(requests.get(url).text)
    df = pd.DataFrame(data)
    df.columns = ['dateTime',
                  'open', 'high', 'low', 'close', 'volume',
                  'close_time', 'qav', 'num_trades',
                  'taker_base_vol', 'taker_quote_vol', 'ignore']
    df.dateTime = pd.to_datetime(df.dateTime, unit='ms').dt.strftime("%Y-%m-%d")
    df.set_index('dateTime', inplace=True)
    last = df.iloc[:, 1:6].tail(1)
    print(last)
    
    #series=last.squeeze()
    #print(round(float(series[0]), 2))
    

klines('APEUSDT')
'''

'''
平均價格
'''
'''
key = " https://api.binance.com/api/v3/avgPrice?symbol=APEUSDT"
data = requests.get(key).json() 
print(data)
'''
'''
嘗試
'''
'''
root_url = 'https://api.binance.com/api/v1/klines'
url = root_url + '?symbol=APEUSDT&interval=1d'
data = json.loads(requests.get(url).text)
df = pd.DataFrame(data)

df.columns = ['dateTime',
                  'open', 'high', 'low', 'close', 'volume',
                  'close_time', 'qav', 'num_trades',
                  'taker_base_vol', 'taker_quote_vol', 'ignore']
df.dateTime = pd.to_datetime(df.dateTime, unit='ms').dt.strftime("%Y-%m-%d")
df.set_index('dateTime', inplace=True)
df.iloc[:,1:5].tail(1)
'''

"""# 新增區段"""

if __name__ == "__main__":
  app.run()